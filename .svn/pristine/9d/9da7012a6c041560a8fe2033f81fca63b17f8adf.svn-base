<template>
	<!-- 消息页面  -->
    <scroll-view :scroll-y="isScroll" >
			<!-- 一条消息列表 -->
			<view class="message-row" :key="index" v-for="(item, index) in dataList"   @touchstart.capture="touchS" @touchmove="touchM" @touchend.capture="touchE" :data-index="index" :style="{right:item.right + 'upx'}" >
				<view class="friend-message" @tap="toConversation(item)">
					<!-- 朋友头像框 -->
					<view class="message-head relative">
						<image :src="item.imgUrl" mode="aspectFill"></image>
						<!-- 未读消息的角标 -->
						<text v-if="0 < item.msgNum && item.msgNum <= 99" class="icon">{{item.msgNum}}</text>
						<text v-if="item.msgNum > 99" class="icon">99+</text>
					</view>
					<!-- 消息内容 -->
					<view class="message-body">
						<view class="message-informatin">
							<span class="message-username">{{item.username}}</span>
							<span class="message-time">{{item.time}}</span>
						</view>
						<view class="message-content one-line-ellipsis">{{item.content}}</view>
					</view>	
				</view>
				<!-- 删除对话框（左滑出现） -->
				<view class="message-delete"    @tap="deleteMessage(index)">
					删除对话
				</view>
			</view>
	</scroll-view>    
</template>

<script>
	// 使用vuex管理登录状态
	import {mapState,mapMutations} from 'vuex';
	import service from '@/service.js';
	import tools from '@/tools/tools.js';
	export default {
		// 监听底部按钮点击事件
		onTabItemTap() {
			// 相当于下拉刷新
			uni.startPullDownRefresh();
		},
		onHide() {
			//消息添加缓存
			service.addConversation(this.conversationMessageList);
		},
		mounted() {
			// 获取屏幕高度并存储
			uni.getSystemInfo({
				success: (res) => {
					this.setWindowHeght(res.windowHeight);
				}
			});
		},
		onLoad() {
			// 显示tabBar的角标
			uni.setTabBarBadge({
			  index: 0,
			  text: this.countMsg+''
			})
			// 检测是否登录(加延时)
			setTimeout(()=>{
				if (!this.hasLogin) {
				    uni.showModal({
				        title: '未登录',
				        content: '您未登录，需要登录后才能继续',
				        /**
				         * 如果需要强制登录，不显示取消按钮
				         */
				        showCancel: !this.forcedLogin,
				        success: (res) => {
				            if (res.confirm) {
								/**
								 * 如果需要强制登录，使用reLaunch方式
								 */
								uni.reLaunch({
								    url: '../../common/login/login'
								});
				            }
				        }
				    });
				}
			},500);
		},
		onShow() {
			// 从state获取消息
			this.dataList=this.conversationMessageList;
			setInterval(()=>{
				const num = this.countMsg;
				if(num==0){
					uni.removeTabBarBadge({
						index:0
					});
				}else{
					uni.setTabBarBadge({
					  index: 0,
					  text: num+''
					});
				}
			},100);
			setTimeout(()=>{
				//消息添加缓存
				service.addConversation(this.conversationMessageList);
				console.log("定时写入缓存");
			},500);	
		},
		data() {
			return {
				// countMsg:0,
				isScroll: true,
				delBtnWidth: 160, //删除按钮宽度
				startX:'',  //手指触碰起点坐标
				dataList:[]				
			}
		},
		methods: {
			...mapMutations(['setWindowHeght']),
			//前往对话界面
			toConversation(item){
				uni.navigateTo({
					url: `../../messageSubpackage/conversation?f_uid=${item.account}&name=${item.username}`,
					success: res => {},
					fail: () => {},
					complete: () => {}
				});
				item.msgNum=0;//进入对话界面以后，未读消息为零
			},
			// 删除消息			
			deleteMessage(index){
				this.dataList.splice(index,1);
				//同时减少消息tabBar右上角数字，num为零时移除
				const num = this.countMsg;
				if(num==0){
					uni.removeTabBarBadge({
						index:0
					});
				}else{
					uni.setTabBarBadge({
					  index: 0,
					  text: num+''
					});
				}
			},
			// 触摸开始
			touchS(e) {
                let touch = e.touches[0];
                for (let index in this.dataList) {
                    this.dataList[index].right = 0;
                }
                this.startX = touch.clientX;
            },
			// 触摸移动
			touchM(e){
				let touch = e.touches[0];
				let item = this.dataList[e.currentTarget.dataset.index];
				let disX = this.startX - touch.clientX;
				if (disX >=20) {
				    if(disX>this.delBtnWidth){
						disX = this.delBtnWidth;
					}
				    this.isScroll = false;
				    this.dataList[e.currentTarget.dataset.index].right = disX;
				} else {
				    this.isScroll = true;
				    this.dataList[e.currentTarget.dataset.index].right = 0;
				}
			},
			// 触摸结束
			touchE(e) {
				let item = this.dataList[e.currentTarget.dataset.index];
				if (item.right >= this.delBtnWidth / 2) {
				    this.isScroll = true;
				    this.dataList[e.currentTarget.dataset.index].right = this.delBtnWidth;
				} else {
				    this.isScroll = true;
				    this.dataList[e.currentTarget.dataset.index].right = 0;
				}
			}
		},
		computed: {
			...mapState(['forcedLogin', 'hasLogin','is_open_socket','conversationMessageList']),
			// 计算消息条数
			countMsg(){
				let msgCount=0;
				for (let i in this.dataList) {
					msgCount+=this.dataList[i].msgNum;
				}
				msgCount= msgCount>99 ? '99+' : msgCount;
				return msgCount;
			},
		},
		// 下拉刷新
		onPullDownRefresh() {
			// 从服务器拉取新数据
			
			// 关闭下拉刷新动画
			setTimeout(()=>{
				uni.stopPullDownRefresh();
			},1000);
		}
	}
</script>


<style lang="less">	
	// 引入预先定义好的less
	@import "~@/common/common.less";
	.message-row{
		width: @p100;
		height: 1.5*@u100;
		position: relative;
		background-color: @colorF;
		display: flex;
	}
	.friend-message{
		width: 7.5*@u100;
		display: flex;
		/* border: 5px solid #007AFF; */
	}
	.message-delete{
		/* border: 1px solid #1AAD19; */
		width: 1.6*@u100;
		height: 1.5*@u100;
		position: absolute;
		top: 0;
		right: -1.6*@u100;
		color: @colorF;
		font-size: 0.25*@u100;
		background-color: @delMsgBtn;
		display: flex;
		align-items: center;
		justify-content: center;
	}
		
	.message-head{
		width: 0.18*@p100;
		display: flex;
		align-items: center;
		justify-content: flex-end;		
		padding-right: 0.2*@u100;
	}
	.message-head image{
		width: 0.8*@u100;
		height: 0.8*@u100;
		border: 1px solid @codeBorder;
		border-radius: 0.5*@p100;
	}
	.message-body{
		margin-top: 0.2*@u100;
		width: 0.82*@p100;
	}
	.message-username{		
		font-size: 0.28*@u100;
		font-weight: bold;
	}
	.message-time{		
		float: right;
		margin-right: 0.1*@u100;
	    color: @color93;
		font-size: 0.2*@u100;
	}
	.message-content{
		margin-top: 0.1*@u100;
		font-size: 10px;
		width: 0.68*@p100;
	}
	/* 未读消息角标 */
	.icon{
		position: absolute;
		top: 0.28*@u100;
		left: 0.84*@u100;
		font-size: 0.2*@u100;
		color: white;
		display: block;
		padding-left: 0.1*@u100;
		padding-right: 0.1*@u100;
		background-color: @iconMsg;
		border-radius: 0.4*@u100;
	}
</style>
