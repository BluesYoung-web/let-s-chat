<template>
	<!-- 对话页面 -->
	<view>
		<scroll-view scroll-y="true" :scroll-top="scrollTop" class="conversationContent" :style="{height:scrollHeight + 'px'}">
			<view class="scroll">


				<view v-for="(item,index) in messages" :key="index">
					<view class="messageTime">
						<text>{{item.time}}</text>
					</view>
					<view v-show="item.sign==='other'" class="message friendMessage">
						<view class="messageHead" @tap="toFriendInfo">
							<image :src="item.head" mode=""></image>
						</view>
						<view class="messageContent">
							<text>{{item.content}}</text>
						</view>
					</view>
					<view v-show="item.sign==='otherVoice'" class="message friendMessage" @tap="playVoice(index)">
						<view class="messageHead" @tap="toFriendInfo">
							<image :src="item.head" mode=""></image>
						</view>
						<view class="messageContent">
							<text>{{item.content}}</text>
						</view>
					</view>
					<view v-show="item.sign==='me'" class="message myMessage">
						<view class="messageContent" style="background-color: #95ec69;">
							<text>{{item.content}}</text>
						</view>
						<view class="messageHead" @tap="toMyInfo">
							<image :src="item.head" mode=""></image>
						</view>
					</view>
					<view v-show="item.sign==='meVoice'" class="message myMessage">
						<view class="messageContent flex flex-js flex-vc" style="background-color: #95ec69;" @tap="playVoice(index)">
							<text>{{item.intervalTime}}</text>
							<image src="/static/img/voiceMessage.png" style="height: 50upx;width: 50upx;"></image>
						</view>
						<view class="messageHead" @tap="toMyInfo">
							<image :src="item.head" mode=""></image>
						</view>
					</view>
				</view>
			</view>
			<!-- 获取scroll-view高度用 -->
			<!-- <view class="scrollBottom" style="height: 10upx;width: 100%;">
	</view> -->
		</scroll-view>
		<!-- 底部文字语言输入框 -->
		<view class="">
			<view class="conversationBottom" :style="'bottom: '+ bottom +'upx'">
				<!-- 语音消息按钮 -->
				<view class="voice" @tap="toStartRecord()">
					<image src="/static/img/voice.png" mode=""></image>
				</view>
				<!-- 消息输入框 -->
				<view class="keyboardInput">
					<!-- 文字输入 -->
					<textarea :focus="txtInput" @focus="getKeyboardHight" v-model="content" auto-height="true" v-if="inputActive" type="text"
					 @tap="inputFocus" />
					<!-- 语音输入 -->
				<button v-else type="default"  @longpress="startRecord" @touchend="endRecord">按 住 说 话</button>				
			</view>
			<!-- 表情键盘按钮 -->
			<view class="faces" @tap="showFacesBox()">
				<image src="/static/img/face.png" mode=""></image>
			</view>
			<!-- 消息发送按钮 -->
			<view class="messageSend" @tap="sendMessage()">
				<image src="/static/img/send.png" mode=""></image>
			</view>
		</view>
		
	</view>
	<!-- 取消语音弹框 -->
	<view class="cancelVoice" v-show="pressActive">
		<view class="flex flex-jc flex-vc" style="width: 100%;height: 200upx;">
			<image src="/static/img/cancelVoice.png" mode=""></image>
		</view>	
		<view class="flex flex-jc" style="width: 100%;height: 50upx;">
			<text>手指松开，取消发送</text>
		</view>		
	</view>
	<!-- 表情键盘 -->
	<view class="facesBox" v-show="show">
		<!-- 表情类型 -->
		<!-- <view class="type flex flex-vc" >
			<view v-for="(items,index) in faceList" :key="index" @tap="showFaces(index)">
				<view class="">{{item}}</view>
			</view>
		</view> -->
		<!-- 表情内容 -->
		<!-- <view class="facesContent">	 -->				
			<scroll-view  scroll-y="true" class="scroll-Y" style="height: 600upx; ">
				
					<!-- style="height: 600upx;" -->
					<!-- <image :src="emoji" mode=""></image> -->
					<view class="face" v-for="(item,index) in faceList" :key="index" @tap="showFaces(item)">
						{{item}}
					</view>
					<!-- <uni-list>
						<uni-list-item style="width: 100upx;height: 100upx;" v-for="(item,index) in faceList" :key="index" title="" note="">{{item}}</uni-list-item>
					</uni-list> -->
			</scroll-view>
			<!-- <scroll-view v-show="index===1" scroll-y="true" class="scroll-Y" style="height: 400upx;">
				<view id="demo1" class="scroll-view-item uni-bg-red" style="height: 600upx;">
					表情区域2
				</view>
			</scroll-view> -->
		<!-- </view> -->
	</view>
</view>
</template>

<script>
	//表情引入
	const appData = require("@/static/emojis/emoji.json");
	
	//获取录音权限相关
	const recorderManager = uni.getRecorderManager();
	const innerAudioContext = uni.createInnerAudioContext();	
	innerAudioContext.autoplay = true;
	
	import uniSegmentedControl from "@/components/uni-segmented-control/uni-segmented-control.vue";
	import {mapState,mapMutations} from 'vuex';
	export default{
		components: {uniSegmentedControl},
		mounted() {
			uni.getSystemInfo({
				success:(res)=> {
					this.scrollHeight = res.windowHeight;//获取屏幕高度
					let info2 = uni.createSelectorQuery().select(".conversationBottom");
					info2.boundingClientRect((data)=>{
						this.scrollHeight =this.scrollHeight - data.height;//屏幕高度-底部键盘区高度
					}).exec();
					let info = uni.createSelectorQuery().select(".scroll");
					info.boundingClientRect((data)=>{
						this.scrollTop = data.height - this.scrollHeight
					}).exec();
				}
			});
		},
		data(){
			return{
				// emoji:'../../static/img/heart.png',
				scrollHeight:'',
				scrollTop:0,
				messages:[
					{
						sign:'other',
						head:'../../static/img/avatar.png',
						content:'今天晚上8点，五排组起来',
						time:'1分钟前'
					},
					{
						sign:'me',
						head:'../../static/img/avatar.png',
						content:'没问题',
						time:'刚刚'
					}
					
				],
				content:'',//消息输入内容
				index:0,  //初始表情类型
				pressActive:false, //是否弹出语音取消框
				bottom:0,  //键盘高度后面获取
				show:false,  //表情键盘是否出现
				//语音输入与文字输入切换
				inputActive:false, 
				voiceActive:true,
				text: 'uni-app',
				voicePath: '',//录音
				intervalTime: 0,
				timer: null,
				voice:'',
				faceList:[  //表情类型列表
					// {
					// 	num:1,
					// 	imgUrl:'../../static/img/comment.png',
					// },
					// {
					// 	num:2,
					// 	imgUrl:'../../static/img/comment.png',
					// }
				],
				// 控制输入框聚焦
				txtInput:false,
				socketTask: null,
				// 确保websocket是打开状态
				is_open_socket: false,
				// 用户uid
				account:'',
				avatarUrl:'',
				// 好友uid
				fuid:''
			}
		},
		computed:{
			...mapState(['tempInfo','userInfo','websocketUrl']),
			intIntervalTime() {
			    // 用于显示整数的秒数
			    return Math.round(this.intervalTime);
			}
		},
		// 关闭websocket【必须在实例销毁之前关闭,否则会是underfined错误】
		beforeDestroy() {
			this.closeSocket();
		},
		onLoad(e) {
			// 从state获取用户信息
			if(this.userInfo){
				let tp=this.userInfo;
				this.account=tp.account;
				this.avatarUrl=tp.avatarUrl;
			}
			console.log("进入会话页");
			if (e.voiceActive==1) {
				console.log("文字输入");
				this.inputActive=true;
				this.voiceActive=false;
				this.txtInput=true;
			} else{
				console.log("语音输入");
				this.inputActive=false;
				this.voiceActive=true;
			}
			
			//获取录音权限相关
			recorderManager.onStop((res)=>{
				this.voicePath = res.tempFilePath;
			});
			// 从state获取用户好友信息
			if (this.tempInfo) {
				let tp=this.tempInfo;
				let avatarUrl=tp.avatarUrl;
				let name=tp.name;
				this.fuid=tp.account;
				// 修改用户头像
				for (let i in this.messages) {
					if(this.messages[i].sign=='other'){
						this.messages[i].head=avatarUrl;
					}else if(this.messages[i].sign=='me'){
						this.messages[i].head=this.avatarUrl;
					}
				}
				// 修改导航栏
				uni.setNavigationBarTitle({
				    title: name
				});
			} else{
				
			}
			// 进入这个页面的时候创建websocket连接【整个页面随时使用】
			this.connectSocketInit();
			// 进入之后延时1s注册
			setTimeout(()=>{
				this.register(this.account, this.socketTask);
			},1000);
			for (let i in appData) {
			    this.faceList.push(appData[i].char);
			  };
		},
		methods:{
			//获取屏幕高度显示朋友圈
			getScrollHeight(){
				uni.getSystemInfo({
					success: (res)=> {
						this.scrollHeight = res.windowHeight;//获取屏幕高度
					}
				});
				return this.scrollHeight
			},
			getScrollTop(){
				uni.getSystemInfo({
					success: (res)=> {
						this.scrollHeight = res.windowHeight;//获取屏幕高度
						let info2 = uni.createSelectorQuery().select(".conversationBottom");
						info2.boundingClientRect((data)=>{
							this.scrollHeight =this.scrollHeight - data.height;//屏幕高度-底部键盘区高度
						}).exec();
						let info = uni.createSelectorQuery().select(".scroll");
						info.boundingClientRect((data)=>{
							this.scrollTop = data.height - this.scrollHeight
						}).exec();
					}
				});
				return this.scrollTop
			},
			// 进入这个页面的时候创建websocket连接【整个页面随时使用】
			connectSocketInit() {
				// 创建一个this.socketTask对象【发送、接收、关闭socket都由这个对象操作】
				this.socketTask = uni.connectSocket({
				// 【非常重要】必须确保你的服务器是成功的,如果是手机测试千万别使用ws://127.0.0.1:9099【特别容易犯的错误】
					url: `${this.websocketUrl}`,
					success(data) {
					console.log("websocket连接成功");
					},
				});
				// 消息的发送和接收必须在正常连接打开中,才能发送或接收【否则会失败】
				this.socketTask.onOpen((res) => {
					console.log("WebSocket连接正常打开中...！");
					this.is_open_socket = true;
					// 注：只有连接正常打开中 ，才能正常成功发送消息
				// 注：只有连接正常打开中 ，才能正常收到消息
					this.socketTask.onMessage((res) => {
						console.log("收到服务器内容：" + JSON.stringify(res));
						try{
							let temp=JSON.parse(res.data);
							// 如果是发给我的
							if(this.account==temp.FID){
								let dt=temp.Data;
								dt.sign='other';
								this.messages.push(dt);
							}
						}catch(e){
							console.log(res.data);
						}
					});
				});
				// 这里仅是事件监听【如果socket关闭了会执行】
				this.socketTask.onClose(() => {
					console.log("已经被关闭了")
				});
		    },
			// 关闭websocket【离开这个页面的时候执行关闭】
			closeSocket() {
				this.socketTask.close({
					success: (res) => {
						this.is_open_socket = false;
						console.log("关闭成功", res)
					},
					fail: (err) => {
						console.log("关闭失败", err)
					},
				});
			},
			leave() {
				this.closeSocket()
			},
			// 发送数据
			sendMsg(id, friendid, Data, ws) {
				let Json = {
					'ID': id,
					'FID': friendid,
					'Data': Data
				};
				ws.send({
					data: JSON.stringify(Json),
					async success() {
						console.log("消息发送成功");
					},
					async fail() {
						console.log("消息发送失败");
					},
				});
			},
			//注册用户用的
			register(id, ws) {
				let Json = {
					'ID': id,
					'Data': "userregister"
				};
				ws.send({
					data: JSON.stringify(Json),
					async success() {
						console.log("注册成功");
					},
					async fail() {
						console.log("注册失败");
					},
				});
			},
			//获取键盘高度
			getKeyboardHight(e){
				let height = e.detail.height;
			},
			//消息发送
			sendMessage(){
				let msg = this.content;
				if(this.content!=''){
					let data={
						sign:'me',
						head:this.avatarUrl,
						content:msg,
						time:'刚刚'
					};
					this.messages.push(data);
					if (this.is_open_socket) {
						// websocket的服务器的原理是:发送一次消息,同时返回一组数据【否则服务器会进去死循环崩溃】
						this.sendMsg(this.account, this.fuid, data, this.socketTask);
					}
					this.content='';
				};
				//发送一条消息，消息始终在最底部
				this.scrollTop = this.getScrollTop();
			},
			//显示不同表情类型
			showFaces(item){
				this.content = this.content + item
			},
			//从表情键盘恢复普通键盘输入
			inputFocus(){
				if(this.bottom==600){
					this.show=false;
					this.bottom=0;
				}
			},
			//显示表情键盘
			showFacesBox(){
				if(this.show==false){
					this.voiceActive=false;
					this.inputActive=true;
					this.show=true;
					this.bottom=600;
					
				}else if(this.show==true){
					this.show=false;
					this.bottom=0;
					
				}				
			},
			//前往朋友资料页面
			toFriendInfo(){
				uni.navigateTo({
					url: '../addressSubpackage/friendsInfo/friendsInfo',
					success: res => {},
					fail: () => {},
					complete: () => {}
				});
			},
			//前往我的界面
			toMyInfo(){
				uni.navigateTo({
					url: '../mySubpackage/myInformation/myInformation',
					success: res => {},
					fail: () => {},
					complete: () => {}
				});
			},
			//点击录音图标显示开始录音按钮
			toStartRecord(){
				if(this.voiceActive==false){
					this.voiceActive=true;
					this.inputActive=false;
					this.show=false;
					this.bottom=0;
				}else if(this.voiceActive==true){
					this.voiceActive=false;
					this.inputActive=true
				}
			},
			// 长按开始录音，取消录音提示框出现
			startRecord() {				
				this.timer = setInterval(() => {
				    this.intervalTime += 0.5;
					if (this.intervalTime >= 0.5 && !this.pressActive) {
				        //如果用户录制的时间太短,就不会去开启录音, 因为有个bug: recorderManager.stop()在短时间内开启在关闭的话,实际上他还在不停地录音,不知道你们有没有遇到过
        		        console.log("开始录音");
 			            this.pressActive=true;
				        this.intervalTime = 0;
				        recorderManager.start();
				    }
				}, 500);
				// this.pressActive=true;
				// console.log('开始录音');			
				// recorderManager.start();
			},
			// 松开手指，录音结束，取消录音提示框消失
			endRecord() {				
				if (this.intervalTime <= 0.5) {
					console.log("录音太短了!!!");
				}
				clearInterval(this.timer);
				if (this.pressActive) {
					setTimeout(() => {
						recorderManager.stop();
						console.log('录音结束');
						this.pressActive = false;
						const voice = this.voicePath;
						const intervalTime = this.intervalTime;
						let data={
							sign:'meVoice',
							intervalTime:intervalTime,
							head:this.avatarUrl,
							content:voice,
							time:'刚刚'
						};
						this.messages.push(data);
					}, 500);
				}
			},
			playVoice(index){
				innerAudioContext.src = this.voicePath;
				innerAudioContext.play();
			}
		}
	}
</script>

<style lang="less">
	// 引入预先定义好的less
	@import "~@/common/common.less";
	.conversationContent{
		width: @p100;
	}
	.cancelVoice{
		width: 2.5*@u100;
		height: 2.5*@u100;
		color: @colorF;
		font-size: 0.25*@u100;
		background-color: @bgcolor;
		position: fixed;
		bottom: 5*@u100;
		left: 2.5*@u100;
		z-index: 5;
	}
	.cancelVoice image{
		width: 2*@u100;
		height: 2*@u100;
	}
	.type{
		background-color: @colorF;
	}
	.type image{
		width: 0.8*@u100;
		height: 0.8*@u100;
		border: 0.05*@u100 solid @colorF ;
		border-radius: @p33;
	}
	.type image:hover{
		background-color: @bgcolor;
	}
	.facesBox{
		width: @p100;
		height: 6*@u100; //后期与键盘高度统一
		background-color: @bgcolor;
		position: fixed;
		bottom: 0;
	}
	.face{
		width: 0.8*@u100;
		height: @u100;
		text-align: center;
		line-height: @u100;
		display: inline-block;
	}
	.messageTime{
		display: flex;
		justify-content: center;
		align-items: center;
		height: 0.6*@u100;
		width: @p100;
	}
	.messageTime text{
		font-size: 0.2*@u100;
		color: @msgTimeColor;
	}
	.message{
		width: @p100;
		display: flex;
		border-bottom: 0.2*@u100 solid @colorF;
	}
	.friendMessage{
		justify-content: flex-start;
		padding-right: 2*@u100;
	}
	.myMessage{
		justify-content: flex-end;
		padding-left: 2*@u100;
	}
	.messageContent{
		background-color: @bgcolor;
		display: flex;
		border-radius: 0.1*@u100;
		/* max-width: 500upx; */
		height: auto;
	}
	.messageContent text{
		font-size: 0.25*@u100;
		margin: 0.2*@u100 0.1*@u100;
		
	}
	.messageContent image{
		margin-right: 0.1*@u100;
	}
	.messageHead{
		display: flex;
		justify-content: center;
		padding: 0 0.2*@u100;
	}
	.messageHead image{
		width: 0.8*@u100;
		height: 0.8*@u100;
	}
	.conversationBottom{
		position: fixed;
		/* z-index: 1; */
		width: @p100;
		/* height:100upx; */
		display: flex;
		align-items: flex-end;
		background-color: @codeBorder;
		padding-top: 0.1*@u100;
		padding-bottom: 0.2*@u100;
	}
	.voice{
		width: 1.2*@u100;
		display: flex;
		justify-content: center;
	}
	.voice image{
		width: 0.6*@u100;
		height: 0.6*@u100;
	}
	.keyboardInput{
		background-color: @colorF;
		border: 0.01*@u100 solid @codeBorder;
		width: 4*@u100;
		/* height: auto; */
		border-radius: 0.15*@u100;
		display: flex;
		align-items: center;
		justify-content: center;
	}
	.keyboardInput textarea{
		width: 4*@u100;
		min-height: 0.4*@u100;
		max-height: 1.5*@u100;
		font-size: 0.3*@u100;
		padding-top: 0.15*@u100;
		padding-bottom: 0.15*@u100;
		/* line-height: 65upx; */
	}
	.keyboardInput button{
		width: 4*@u100;
		height: 0.65*@u100;
		line-height: 0.65*@u100;
	}
	.faces{
		width: 1.1*@u100;
		display: flex;
		justify-content: center;
	}
	.faces image{
		width: 0.7*@u100;
		height: 0.7*@u100;
	}
	.messageSend{
		height: 0.7*@u100;
		width: 0.7*@u100;
		border: 1upx solid @codeBorder;
		border-radius: 0.5*@p100;
		background-color: @sendMsgBtn;
		display: flex;
		justify-content: center;
		align-items: center;
	}
	.messageSend image{		
		height: 0.35*@u100;
		width: 0.35*@u100;
	}
</style>
